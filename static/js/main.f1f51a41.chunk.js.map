{"version":3,"sources":["NoteTakerItem.js","NoteTakerList.js","NoteTaker.js","serviceWorker.js","index.js"],"names":["NoteTakerItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteItem","bind","assertThisInitialized","openNoteItem","handleEditPost","handleContentChange","state","content","isOpen","editing","e","stopPropagation","deleteItems","index","preventDefault","open","setState","nextProps","onSave","target","value","split","map","item","key","react_default","a","createElement","noteStyle","classStyle","backgroundColor","className","onClick","style","onChange","noteItem","Component","NoteTakerList","clickTodoBtn","changeInputValue","deleteListItem","handleSave","list","inputValue","concat","toConsumableArray","splice","lists","_this2","src_NoteTakerItem","react","CSSTransitionGroup_default","transitionName","transitionEnterTimeout","transitionLeaveTimeout","getNoteTakerListItems","type","NoteTaker","src_NoteTakerList","Boolean","window","location","hostname","match","ReactDOM","render","src_NoteTaker","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1f51a41.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//import NoteTakerModal from \"./NoteTakerModal\";\n\nclass NoteTakerItem extends Component {\n  constructor(props) {\n    super(props);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.openNoteItem = this.openNoteItem.bind(this);\n    //this.openNoteModal = this.openNoteModal.bind(this);\n    this.handleEditPost = this.handleEditPost.bind(this);\n    this.handleContentChange = this.handleContentChange.bind(this);\n    this.state = {\n      content: props.content,\n      isOpen: false,\n      editing: false\n    };\n  }\n  //Pass data to parent Component through a Function/method\n  deleteItem(e) {\n    e.stopPropagation();\n    this.props.deleteItems(this.props.index);\n  }\n\n  openNoteItem(e) {\n    e.preventDefault();\n    if (this.state.open === false) {\n      this.setState({\n        open: true\n      });\n    } else {\n      this.setState({\n        open: false\n      });\n    }\n  }\n\n  // openNoteModal(e) {\n  //   e.preventDefault();\n  // }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.content !== nextProps.content) {\n      this.setState({ content: nextProps.content });\n    }\n  }\n\n  handleEditPost(e) {\n    e.stopPropagation();\n    const editing = this.state.editing;\n    if (editing) {\n      this.props.onSave({\n        content: this.state.content\n      });\n    }\n    this.setState({\n      editing: !editing\n    });\n  }\n\n  handleContentChange(e) {\n    //console.log(e.target.value);\n    //const newContent = { ...this.state.content, content: e.target.value };\n    this.setState({\n      content: e.target.value\n    });\n  }\n\n  noteItem() {\n    return this.state.content.split(\"\\n\").map((item, key) => {\n      return (\n        <span key={key}>\n          {item}\n          <br />\n        </span>\n      );\n    });\n  }\n\n  render() {\n    const { content } = this.state;\n    let noteStyle = {};\n    let classStyle = \"\";\n    if (this.state.open) {\n      classStyle = \"is-open\";\n      noteStyle = {\n        backgroundColor: \"#fff\"\n      };\n    } else {\n      classStyle = \"\";\n      noteStyle = {\n        backgroundColor: \"#ffe9c6\"\n      };\n    }\n\n    return (\n      <li\n        className={\"list--item \" + classStyle}\n        onClick={this.openNoteItem}\n        style={noteStyle}\n      >\n        {this.state.editing ? (\n          <form>\n            <textarea value={content} onChange={this.handleContentChange} />\n          </form>\n        ) : (\n          <p>{this.noteItem()}</p>\n        )}\n\n        <div>\n          <button onClick={this.handleEditPost}>\n            {this.state.editing ? \"Save\" : \"Edit\"}\n          </button>\n          <button className=\"delete-btn\" onClick={this.deleteItem}>\n            Delete\n          </button>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default NoteTakerItem;\n","import React, { Component, Fragment } from \"react\";\nimport NoteTakerItem from \"./NoteTakerItem\";\n//import NoteTakerModal from \"./NoteTakerModal\";\n\nimport CSSTransitionGroup from \"react-transition-group/CSSTransitionGroup\";\nimport \"./Transition.css\";\n\nclass NoteTakerList extends Component {\n  constructor(props) {\n    super(props);\n    this.clickTodoBtn = this.clickTodoBtn.bind(this);\n    this.changeInputValue = this.changeInputValue.bind(this);\n    this.deleteListItem = this.deleteListItem.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.state = {\n      list: [],\n      inputValue: \"\"\n    };\n  }\n\n  clickTodoBtn() {\n    //this.state.list.push(\"hello world\");\n    //use setState to update/change state's data\n    if (this.state.inputValue !== \"\") {\n      this.setState({\n        // this is the btn, but use bind to change this\n        list: [...this.state.list, this.state.inputValue],\n        //clear input value\n        inputValue: \"\"\n      });\n    }\n  }\n\n  changeInputValue(e) {\n    //console.log(e.target.value);\n    this.setState({\n      inputValue: e.target.value\n    });\n  }\n\n  // clickListItem(index) {\n  //   //duplicate list data\n  //   const list = [...this.state.list];\n  //   //remove onclick item\n  //   list.splice(index, 1);\n  //   //update todo list\n  //   this.setState({\n  //     list: list\n  //   });\n  // }\n\n  // A Function that child Component can pass data to the parent Component\n  deleteListItem(index) {\n    const list = [...this.state.list];\n    list.splice(index, 1);\n    this.setState({\n      list: list\n    });\n  }\n\n  handleSave(list) {\n    const lists = this.state.list.map((item, index) => {\n      const newItem = item.index === list.index ? list : item;\n      return newItem;\n    });\n    this.setState({\n      lists\n    });\n  }\n\n  getNoteTakerListItems() {\n    return this.state.list.map((item, index) => {\n      return (\n        <NoteTakerItem\n          key={index}\n          deleteItems={this.deleteListItem}\n          onSave={this.handleSave}\n          content={item}\n          index={index}\n        />\n        // <li key={index} onClick={this.clickListItem.bind(this, index)}>\n        //   {item}\n        // </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"note-listing\">\n          <h3>Notes Listing</h3>\n          <ul className=\"list--wrapper\">\n            <CSSTransitionGroup\n              transitionName=\"fade\"\n              transitionEnterTimeout={500}\n              transitionLeaveTimeout={200}\n            >\n              {this.getNoteTakerListItems()}\n            </CSSTransitionGroup>\n          </ul>\n        </div>\n        <div className=\"edit-panel\">\n          <div className=\"edit-panel--title\">\n            <h3>Edit Note Here:</h3>\n          </div>\n          <div className=\"edit-panel--content\">\n            <textarea\n              type=\"text\"\n              value={this.state.inputValue}\n              onChange={this.changeInputValue}\n            />\n          </div>\n          <div className=\"edit-panel--btn\">\n            <button onClick={this.clickTodoBtn}>Add Me</button>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default NoteTakerList;\n","import React, { Component } from \"react\";\nimport NoteTakerList from \"./NoteTakerList\";\nimport \"./Theme.css\";\n\nclass NoteTaker extends Component {\n  render() {\n    return (\n      <div className=\"app--wrapper\">\n        <NoteTakerList />\n      </div>\n    );\n  }\n}\n\nexport default NoteTaker;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport NoteTaker from \"./NoteTaker\";\n// import TodoList from \"./TodoList\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<NoteTaker />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}